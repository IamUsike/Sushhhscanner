import { Parameter, ParameterVulnerability, PayloadGenerationOptions } from './parameterTester';
export interface EndpointParameter {
    endpoint: string;
    method: string;
    parameters: Parameter[];
    authentication?: {
        required: boolean;
        type: string;
        credentials?: any;
    };
}
export interface ParameterScanOptions extends PayloadGenerationOptions {
    concurrency?: number;
    timeoutPerParameter?: number;
    skipParameters?: string[];
    targetSeverity?: 'ALL' | 'CRITICAL' | 'HIGH' | 'MEDIUM';
    enableSmartTesting?: boolean;
    adaptiveTesting?: boolean;
}
export interface ParameterScanResult {
    endpoint: string;
    method: string;
    scanStartTime: string;
    scanEndTime: string;
    totalParametersTested: number;
    vulnerabilitiesFound: number;
    vulnerabilities: ParameterVulnerability[];
    scanSummary: {
        byParameter: Record<string, number>;
        bySeverity: Record<string, number>;
        byTechnique: Record<string, number>;
        averageTestTime: number;
        payloadsGenerated: number;
        aiEnhancedPayloads: number;
    };
    recommendations: string[];
    riskScore: number;
}
export interface ComprehensiveParameterReport {
    scanId: string;
    targetCount: number;
    totalVulnerabilities: number;
    totalParametersTested: number;
    scanDuration: number;
    overallRiskScore: number;
    results: ParameterScanResult[];
    executiveSummary: string;
    topVulnerabilities: ParameterVulnerability[];
    remediationPriority: Array<{
        vulnerability: ParameterVulnerability;
        priority: 'URGENT' | 'HIGH' | 'MEDIUM' | 'LOW';
        estimatedEffort: string;
    }>;
}
export declare class ParameterVulnerabilityScanner {
    private parameterTester;
    private aiPayloadGenerator;
    private scanId;
    private options;
    constructor(options?: Partial<ParameterScanOptions>);
    scanEndpoint(endpointParam: EndpointParameter, progressCallback?: (progress: string) => void): Promise<ParameterScanResult>;
    scanMultipleEndpoints(endpoints: EndpointParameter[], progressCallback?: (progress: string) => void): Promise<ComprehensiveParameterReport>;
    private detectApplicationContext;
    private getPreviousFindings;
    private adaptTestingStrategy;
    private generateScanResult;
    private generateComprehensiveReport;
    private calculateRiskScore;
    private calculateOverallRiskScore;
    private generateRecommendations;
    private getTopVulnerabilities;
    private generateRemediationPriorities;
    private generateExecutiveSummary;
    private getTopVulnerabilityTypes;
}
//# sourceMappingURL=parameterVulnerabilityScanner.d.ts.map